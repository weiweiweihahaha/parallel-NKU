#include <sys/time.h>
#include <iostream>
#include <sstream>
#include <fstream>
#include <mpi.h>
#include <pmmintrin.h>
#include <omp.h>
using namespace std;

static const int thread_count = 4;

unsigned int Act[43577][1363] = { 0 };
unsigned int Pas[54274][1363] = { 0 };

const int Num = 1362;
const int pasNum = 54274;
const int lieNum = 43577;

// 消元子初始化
void init_A()
{
    unsigned int a;
    ifstream infile("Groebner/测试样例8 矩阵列数23045，非零消元子18748，被消元行14325/消元子.txt");
    char fin[10000] = { 0 };
    int index;
    while (infile.getline(fin, sizeof(fin)))
    {
        std::stringstream line(fin);
        int biaoji = 0;

        while (line >> a)
        {
            if (biaoji == 0)
            {
                index = a;
                biaoji = 1;
            }
            int k = a % 32;
            int j = a / 32;

            int temp = 1 << k;
            Act[index][Num - 1 - j] += temp;
            Act[index][Num] = 1;
        }
    }
}

// 被消元行初始化
void init_P()
{
    unsigned int a;
    ifstream infile("Groebner/测试样例8 矩阵列数23045，非零消元子18748，被消元行14325/被消元行.txt");
    char fin[10000] = { 0 };
    int index = 0;
    while (infile.getline(fin, sizeof(fin)))
    {
        std::stringstream line(fin);
        int biaoji = 0;

        while (line >> a)
        {
            if (biaoji == 0)
            {
                Pas[index][Num] = a;
                biaoji = 1;
            }

            int k = a % 32;
            int j = a / 32;

            int temp = 1 << k;
            Pas[index][Num - 1 - j] += temp;
        }
        index++;
    }
}

void f_ordinary()
{
    timeval t_start, t_end;
    gettimeofday(&t_start, NULL);

    bool sign;
    do
    {
        for (int i = lieNum - 1; i - 8 >= -1; i -= 8)
        {
            for (int j = 0; j < pasNum; j++)
            {
                while (Pas[j][Num] <= i && Pas[j][Num] >= i - 7)
                {
                    int index = Pas[j][Num];
                    if (Act[index][Num] == 1)
                    {
                        for (int k = 0; k < Num; k++)
                        {
                            Pas[j][k] ^= Act[index][k];
                        }

                        int num = 0, S_num = 0;
                        for (num = 0; num < Num; num++)
                        {
                            if (Pas[j][num] != 0)
                            {
                                unsigned int temp = Pas[j][num];
                                while (temp != 0)
                                {
                                    temp >>= 1;
                                    S_num++;
                                }
                                S_num += num * 32;
                                break;
                            }
                        }
                        Pas[j][Num] = S_num - 1;
                    }
                    else
                    {
                        break;
                    }
                }
            }
        }

        for (int i = lieNum % 8 - 1; i >= 0; i--)
        {
            for (int j = 0; j < pasNum; j++)
            {
                while (Pas[j][Num] == i)
                {
                    if (Act[i][Num] == 1)
                    {
                        for (int k = 0; k < Num; k++)
                        {
                            Pas[j][k] ^= Act[i][k];
                        }

                        int num = 0, S_num = 0;
                        for (num = 0; num < Num; num++)
                        {
                            if (Pas[j][num] != 0)
                            {
                                unsigned int temp = Pas[j][num];
                                while (temp != 0)
                                {
                                    temp >>= 1;
                                    S_num++;
                                }
                                S_num += num * 32;
                                break;
                            }
                        }
                        Pas[j][Num] = S_num - 1;
                    }
                    else
                    {
                        break;
                    }
                }
            }
        }

        sign = false;
        for (int i = 0; i < pasNum; i++)
        {
            int temp = Pas[i][Num];
            if (temp == -1)
            {
                continue;
            }

            if (Act[temp][Num] == 0)
            {
                for (int k = 0; k < Num; k++)
                    Act[temp][k] = Pas[i][k];
                Pas[i][Num] = -1;
                sign = true;
            }
        }

    } while (sign == true);

    gettimeofday(&t_end, NULL);
    cout << "ordinary time cost: "
         << 1000 * (t_end.tv_sec - t_start.tv_sec) +
                0.001 * (t_end.tv_usec - t_start.tv_usec)
         << "ms" << endl;
}

void f_ordinary1()
{
    timeval t_start, t_end;
    gettimeofday(&t_start, NULL);

    for (int i = lieNum - 1; i - 8 >= -1; i -= 8)
    {
        for (int j = 0; j < pasNum; j++)
        {
            while (Pas[j][Num] <= i && Pas[j][Num] >= i - 7)
            {
                int index = Pas[j][Num];
                if (Act[index][Num] == 1)
                {
                    for (int k = 0; k < Num; k++)
                    {
                        Pas[j][k] ^= Act[index][k];
                    }

                    int num = 0, S_num = 0;
                    for (num = 0; num < Num; num++)
                    {
                        if (Pas[j][num] != 0)
                        {
                            unsigned int temp = Pas[j][num];
                            while (temp != 0)
                            {
                                temp >>= 1;
                                S_num++;
                            }
                            S_num += num * 32;
                            break;
                        }
                    }
                    Pas[j][Num] = S_num - 1;
                }
                else
                {
                    for (int k = 0; k < Num; k++)
                        Act[index][k] = Pas[j][k];
                    Act[index][Num] = 1;
                    break;
                }
            }
        }
    }

    for (int i = lieNum % 8 - 1; i >= 0; i--)
    {
        for (int j = 0; j < pasNum; j++)
        {
            while (Pas[j][Num] == i)
            {
                if (Act[i][Num] == 1)
                {
                    for (int k = 0; k < Num; k++)
                    {
                        Pas[j][k] ^= Act[i][k];
                    }

                    int num = 0, S_num = 0;
                    for (num = 0; num < Num; num++)
                    {
                        if (Pas[j][num] != 0)
                        {
                            unsigned int temp = Pas[j][num];
                            while (temp != 0)
                            {
                                temp >>= 1;
                                S_num++;
                            }
                            S_num += num * 32;
                            break;
                        }
                    }
                    Pas[j][Num] = S_num - 1;
                }
                else
                {
                    for (int k = 0; k < Num; k++)
                        Act[i][k] = Pas[j][k];
                    Act[i][Num] = 1;
                    break;
                }
            }
        }
    }

    gettimeofday(&t_end, NULL);
    cout << "ordinary time cost: "
         << 1000 * (t_end.tv_sec - t_start.tv_sec) +
                0.001 * (t_end.tv_usec - t_start.tv_usec)
         << "ms" << endl;
}

void super(int rank, int num_proc)
{
    int i;
#pragma omp parallel num_threads(thread_count)
    for (i = lieNum - 1; i - 8 >= -1; i -= 8)
    {
#pragma omp for schedule(dynamic, 20)
        for (int j = 0; j < pasNum; j++)
        {
            if (int(j % num_proc) == rank)
            {
                while (Pas[j][Num] <= i && Pas[j][Num] >= i - 7)
                {
                    int index = Pas[j][Num];

                    if (Act[index][Num] == 1)
                    {
                        int k;
                        __m128 va_Pas, va_Act;
                        for (k = 0; k + 4 <= Num; k += 4)
                        {
                            va_Pas = _mm_loadu_ps((float*)&(Pas[j][k]));
                            va_Act = _mm_loadu_ps((float*)&(Act[index][k]));
                            va_Pas = _mm_xor_ps(va_Pas, va_Act);
                            _mm_storeu_ps((float*)&(Pas[j][k]), va_Pas);
                        }
                        for (; k < Num; k++)
                            Pas[j][k] ^= Act[index][k];

                        int num = 0, S_num = 0;
                        for (num = 0; num < Num; num++)
                        {
                            if (Pas[j][num] != 0)
                            {
                                unsigned int temp = Pas[j][num];
                                while (temp != 0)
                                {
                                    temp >>= 1;
                                    S_num++;
                                }
                                S_num += num * 32;
                                break;
                            }
                        }
                        Pas[j][Num] = S_num - 1;
                    }
                    else
                    {
                        break;
                    }
                }
            }
        }
    }

    for (i = lieNum % 8 - 1; i >= 0; i--)
    {
#pragma omp parallel num_threads(thread_count)
#pragma omp for schedule(dynamic, 20)
        for (int j = 0; j < pasNum; j++)
        {
            if (int(j % num_proc) == rank)
            {
                while (Pas[j][Num] == i)
                {
                    if (Act[i][Num] == 1)
                    {
                        int k;
                        __m128 va_Pas, va_Act;
                        for (k = 0; k + 4 <= Num; k += 4)
                        {
                            va_Pas = _mm_loadu_ps((float*)&(Pas[j][k]));
                            va_Act = _mm_loadu_ps((float*)&(Act[i][k]));
                            va_Pas = _mm_xor_ps(va_Pas, va_Act);
                            _mm_storeu_ps((float*)&(Pas[j][k]), va_Pas);
                        }
                        for (; k < Num; k++)
                            Pas[j][k] ^= Act[i][k];

                        int num = 0, S_num = 0;
                        for (num = 0; num < Num; num++)
                        {
                            if (Pas[j][num] != 0)
                            {
                                unsigned int temp = Pas[j][num];
                                while (temp != 0)
                                {
                                    temp >>= 1;
                                    S_num++;
                                }
                                S_num += num * 32;
                                break;
                            }
                        }
                        Pas[j][Num] = S_num - 1;
                    }
                    else
                    {
                        break;
                    }
                }
            }
        }
    }

    bool sign;
    do
    {
#pragma omp parallel for num_threads(thread_count)
        for (int i = 0; i < pasNum; i++)
        {
            if (int(i % num_proc) == rank)
            {
                int temp = Pas[i][Num];
                if (temp == -1)
                {
                    continue;
                }

                if (Act[temp][Num] == 0)
                {
                    for (int k = 0; k < Num; k++)
                        Act[temp][k] = Pas[i][k];
                    Act[temp][Num] = 1;
                    Pas[i][Num] = -1;
                }
            }
        }

        MPI_Allreduce(MPI_IN_PLACE, Act, 43577 * 1363, MPI_INT, MPI_MAX, MPI_COMM_WORLD);

        sign = false;
#pragma omp parallel for num_threads(thread_count)
        for (int i = 0; i < pasNum; i++)
        {
            if (Pas[i][Num] != -1)
            {
                sign = true;
                break;
            }
        }

        MPI_Allreduce(MPI_IN_PLACE, &sign, 1, MPI_C_BOOL, MPI_LOR, MPI_COMM_WORLD);

    } while (sign == true);
}

int main(int argc, char* argv[])
{
    int rank, num_proc;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &num_proc);

    if (rank == 0)
    {
        init_A();
        init_P();
    }

    MPI_Bcast(Act, 43577 * 1363, MPI_INT, 0, MPI_COMM_WORLD);
    MPI_Bcast(Pas, 54274 * 1363, MPI_INT, 0, MPI_COMM_WORLD);

    timeval t_start, t_end;
    gettimeofday(&t_start, NULL);

    super(rank, num_proc);

    gettimeofday(&t_end, NULL);

    if (rank == 0)
    {
        cout << "super time cost: "
             << 1000 * (t_end.tv_sec - t_start.tv_sec) +
                    0.001 * (t_end.tv_usec - t_start.tv_usec)
             << "ms" << endl;
    }

    MPI_Finalize();
    return 0;
}
